// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: task.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    title,
    description,
    due_to,
    status,
    priority,
    project_id,
    assigned_to
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, title, description, created_at, due_to, time_spent, status, priority, project_id, assigned_to
`

type CreateTaskParams struct {
	Title       string      `json:"title"`
	Description string      `json:"description"`
	DueTo       time.Time   `json:"due_to"`
	Status      string      `json:"status"`
	Priority    string      `json:"priority"`
	ProjectID   pgtype.Int4 `json:"project_id"`
	AssignedTo  pgtype.Int4 `json:"assigned_to"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.DueTo,
		arg.Status,
		arg.Priority,
		arg.ProjectID,
		arg.AssignedTo,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.DueTo,
		&i.TimeSpent,
		&i.Status,
		&i.Priority,
		&i.ProjectID,
		&i.AssignedTo,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, title, description, created_at, due_to, time_spent, status, priority, project_id, assigned_to FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.DueTo,
		&i.TimeSpent,
		&i.Status,
		&i.Priority,
		&i.ProjectID,
		&i.AssignedTo,
	)
	return i, err
}

const listEmployeeTasks = `-- name: ListEmployeeTasks :many
SELECT id, title, description, created_at, due_to, time_spent, status, priority, project_id, assigned_to FROM tasks
WHERE assigned_to = $1
`

func (q *Queries) ListEmployeeTasks(ctx context.Context, assignedTo pgtype.Int4) ([]Task, error) {
	rows, err := q.db.Query(ctx, listEmployeeTasks, assignedTo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.DueTo,
			&i.TimeSpent,
			&i.Status,
			&i.Priority,
			&i.ProjectID,
			&i.AssignedTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectTasks = `-- name: ListProjectTasks :many
SELECT id, title, description, created_at, due_to, time_spent, status, priority, project_id, assigned_to FROM tasks
WHERE project_id = $1
`

func (q *Queries) ListProjectTasks(ctx context.Context, projectID pgtype.Int4) ([]Task, error) {
	rows, err := q.db.Query(ctx, listProjectTasks, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.DueTo,
			&i.TimeSpent,
			&i.Status,
			&i.Priority,
			&i.ProjectID,
			&i.AssignedTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, description, created_at, due_to, time_spent, status, priority, project_id, assigned_to FROM tasks
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.DueTo,
			&i.TimeSpent,
			&i.Status,
			&i.Priority,
			&i.ProjectID,
			&i.AssignedTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskDeadline = `-- name: UpdateTaskDeadline :one
UPDATE tasks
SET due_to = $2
WHERE id = $1
RETURNING id, title, description, created_at, due_to, time_spent, status, priority, project_id, assigned_to
`

type UpdateTaskDeadlineParams struct {
	ID    int64     `json:"id"`
	DueTo time.Time `json:"due_to"`
}

func (q *Queries) UpdateTaskDeadline(ctx context.Context, arg UpdateTaskDeadlineParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTaskDeadline, arg.ID, arg.DueTo)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.DueTo,
		&i.TimeSpent,
		&i.Status,
		&i.Priority,
		&i.ProjectID,
		&i.AssignedTo,
	)
	return i, err
}

const updateTaskDescription = `-- name: UpdateTaskDescription :one
UPDATE tasks
SET description = $2
WHERE id = $1
RETURNING id, title, description, created_at, due_to, time_spent, status, priority, project_id, assigned_to
`

type UpdateTaskDescriptionParams struct {
	ID          int64  `json:"id"`
	Description string `json:"description"`
}

func (q *Queries) UpdateTaskDescription(ctx context.Context, arg UpdateTaskDescriptionParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTaskDescription, arg.ID, arg.Description)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.DueTo,
		&i.TimeSpent,
		&i.Status,
		&i.Priority,
		&i.ProjectID,
		&i.AssignedTo,
	)
	return i, err
}

const updateTaskPriority = `-- name: UpdateTaskPriority :one
UPDATE tasks
SET priority = $2
WHERE id = $1
RETURNING id, title, description, created_at, due_to, time_spent, status, priority, project_id, assigned_to
`

type UpdateTaskPriorityParams struct {
	ID       int64  `json:"id"`
	Priority string `json:"priority"`
}

func (q *Queries) UpdateTaskPriority(ctx context.Context, arg UpdateTaskPriorityParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTaskPriority, arg.ID, arg.Priority)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.DueTo,
		&i.TimeSpent,
		&i.Status,
		&i.Priority,
		&i.ProjectID,
		&i.AssignedTo,
	)
	return i, err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :one
UPDATE tasks
SET status = $2
WHERE id = $1
RETURNING id, title, description, created_at, due_to, time_spent, status, priority, project_id, assigned_to
`

type UpdateTaskStatusParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTaskStatus, arg.ID, arg.Status)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.DueTo,
		&i.TimeSpent,
		&i.Status,
		&i.Priority,
		&i.ProjectID,
		&i.AssignedTo,
	)
	return i, err
}

const updateTaskTimeSpent = `-- name: UpdateTaskTimeSpent :one
UPDATE tasks
SET time_spent = $2
WHERE id = $1
RETURNING id, title, description, created_at, due_to, time_spent, status, priority, project_id, assigned_to
`

type UpdateTaskTimeSpentParams struct {
	ID        int64       `json:"id"`
	TimeSpent pgtype.Int8 `json:"time_spent"`
}

func (q *Queries) UpdateTaskTimeSpent(ctx context.Context, arg UpdateTaskTimeSpentParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTaskTimeSpent, arg.ID, arg.TimeSpent)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.DueTo,
		&i.TimeSpent,
		&i.Status,
		&i.Priority,
		&i.ProjectID,
		&i.AssignedTo,
	)
	return i, err
}

const updateTaskTitle = `-- name: UpdateTaskTitle :one
UPDATE tasks
SET title = $2
WHERE id = $1
RETURNING id, title, description, created_at, due_to, time_spent, status, priority, project_id, assigned_to
`

type UpdateTaskTitleParams struct {
	ID    int64  `json:"id"`
	Title string `json:"title"`
}

func (q *Queries) UpdateTaskTitle(ctx context.Context, arg UpdateTaskTitleParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTaskTitle, arg.ID, arg.Title)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.DueTo,
		&i.TimeSpent,
		&i.Status,
		&i.Priority,
		&i.ProjectID,
		&i.AssignedTo,
	)
	return i, err
}
