// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: project.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const addProjectParticipant = `-- name: AddProjectParticipant :one
INSERT INTO project_participants (
    project_id,
    user_id,
    role
) VALUES (
    $1, $2, $3
) RETURNING project_id, user_id, role, joined_at
`

type AddProjectParticipantParams struct {
	ProjectID int64  `json:"project_id"`
	UserID    int64  `json:"user_id"`
	Role      string `json:"role"`
}

func (q *Queries) AddProjectParticipant(ctx context.Context, arg AddProjectParticipantParams) (ProjectParticipant, error) {
	row := q.db.QueryRow(ctx, addProjectParticipant, arg.ProjectID, arg.UserID, arg.Role)
	var i ProjectParticipant
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.Role,
		&i.JoinedAt,
	)
	return i, err
}

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    title,
    description,
    start_date,
    end_date,
    created_by
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, title, description, start_date, end_date, created_by
`

type CreateProjectParams struct {
	Title       string      `json:"title"`
	Description string      `json:"description"`
	StartDate   time.Time   `json:"start_date"`
	EndDate     time.Time   `json:"end_date"`
	CreatedBy   pgtype.Int4 `json:"created_by"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject,
		arg.Title,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.CreatedBy,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedBy,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProject, id)
	return err
}

const getProject = `-- name: GetProject :one
SELECT id, title, description, start_date, end_date, created_by FROM projects
WHERE id = $1
`

func (q *Queries) GetProject(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedBy,
	)
	return i, err
}

const getProjectParticipantRole = `-- name: GetProjectParticipantRole :one
SELECT role FROM project_participants
WHERE project_id = $1 AND user_id = $2
`

type GetProjectParticipantRoleParams struct {
	ProjectID int64 `json:"project_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) GetProjectParticipantRole(ctx context.Context, arg GetProjectParticipantRoleParams) (string, error) {
	row := q.db.QueryRow(ctx, getProjectParticipantRole, arg.ProjectID, arg.UserID)
	var role string
	err := row.Scan(&role)
	return role, err
}

const getProjectStats = `-- name: GetProjectStats :one
SELECT 
    COUNT(DISTINCT t.id) as task_count,
    COALESCE(SUM(t.time_spent), 0)::bigint as total_time_spent
FROM tasks t
WHERE t.project_id = $1
`

type GetProjectStatsRow struct {
	TaskCount      int64 `json:"task_count"`
	TotalTimeSpent int64 `json:"total_time_spent"`
}

func (q *Queries) GetProjectStats(ctx context.Context, projectID pgtype.Int4) (GetProjectStatsRow, error) {
	row := q.db.QueryRow(ctx, getProjectStats, projectID)
	var i GetProjectStatsRow
	err := row.Scan(&i.TaskCount, &i.TotalTimeSpent)
	return i, err
}

const getProjectWithStats = `-- name: GetProjectWithStats :many
SELECT 
    p.id, p.title, p.description, p.start_date, p.end_date, p.created_by,
    COUNT(DISTINCT t.id) as task_count,
    COALESCE(SUM(t.time_spent), 0)::bigint as total_time_spent
FROM projects p
LEFT JOIN tasks t ON p.id = t.project_id
GROUP BY p.id
ORDER BY p.start_date DESC
`

type GetProjectWithStatsRow struct {
	ID             int64       `json:"id"`
	Title          string      `json:"title"`
	Description    string      `json:"description"`
	StartDate      time.Time   `json:"start_date"`
	EndDate        time.Time   `json:"end_date"`
	CreatedBy      pgtype.Int4 `json:"created_by"`
	TaskCount      int64       `json:"task_count"`
	TotalTimeSpent int64       `json:"total_time_spent"`
}

func (q *Queries) GetProjectWithStats(ctx context.Context) ([]GetProjectWithStatsRow, error) {
	rows, err := q.db.Query(ctx, getProjectWithStats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProjectWithStatsRow{}
	for rows.Next() {
		var i GetProjectWithStatsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedBy,
			&i.TaskCount,
			&i.TotalTimeSpent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectParticipants = `-- name: ListProjectParticipants :many
SELECT e.id, e.name, e.email, e.role
FROM employees e
JOIN project_participants pp ON e.id = pp.user_id
WHERE pp.project_id = $1
`

func (q *Queries) ListProjectParticipants(ctx context.Context, projectID int64) ([]Employee, error) {
	rows, err := q.db.Query(ctx, listProjectParticipants, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Employee{}
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjects = `-- name: ListProjects :many
SELECT id, title, description, start_date, end_date, created_by FROM projects
`

func (q *Queries) ListProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProjectParticipant = `-- name: RemoveProjectParticipant :exec
DELETE FROM project_participants
WHERE project_id = $1 AND user_id = $2
`

type RemoveProjectParticipantParams struct {
	ProjectID int64 `json:"project_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) RemoveProjectParticipant(ctx context.Context, arg RemoveProjectParticipantParams) error {
	_, err := q.db.Exec(ctx, removeProjectParticipant, arg.ProjectID, arg.UserID)
	return err
}

const updateParticipantRole = `-- name: UpdateParticipantRole :one
UPDATE project_participants
SET role = $3
WHERE project_id = $1 AND user_id = $2
RETURNING project_id, user_id, role, joined_at
`

type UpdateParticipantRoleParams struct {
	ProjectID int64  `json:"project_id"`
	UserID    int64  `json:"user_id"`
	Role      string `json:"role"`
}

func (q *Queries) UpdateParticipantRole(ctx context.Context, arg UpdateParticipantRoleParams) (ProjectParticipant, error) {
	row := q.db.QueryRow(ctx, updateParticipantRole, arg.ProjectID, arg.UserID, arg.Role)
	var i ProjectParticipant
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.Role,
		&i.JoinedAt,
	)
	return i, err
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
    SET title = $2,
    end_date = $3
WHERE id = $1
RETURNING id, title, description, start_date, end_date, created_by
`

type UpdateProjectParams struct {
	ID      int64     `json:"id"`
	Title   string    `json:"title"`
	EndDate time.Time `json:"end_date"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject, arg.ID, arg.Title, arg.EndDate)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedBy,
	)
	return i, err
}
