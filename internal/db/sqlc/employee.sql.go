// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: employee.sql

package db

import (
	"context"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employees (
    first_name,
    last_name,
    email,
    password_hash,
    role
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, first_name, last_name, email, password_hash, role
`

type CreateEmployeeParams struct {
	FirstName    string `json:"first_name"`
	LastName     string `json:"last_name"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
	Role         string `json:"role"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, createEmployee,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PasswordHash,
		arg.Role,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employees
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmployee, id)
	return err
}

const getEmployee = `-- name: GetEmployee :one
SELECT id, first_name, last_name, email, password_hash, role FROM employees
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmployee(ctx context.Context, id int64) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployee, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}

const listEmployees = `-- name: ListEmployees :many
SELECT id, first_name, last_name, email, password_hash, role FROM employees
`

func (q *Queries) ListEmployees(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.Query(ctx, listEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Employee{}
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PasswordHash,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployeeFirstName = `-- name: UpdateEmployeeFirstName :one
UPDATE employees
SET first_name = $2
WHERE id = $1
RETURNING id, first_name, last_name, email, password_hash, role
`

type UpdateEmployeeFirstNameParams struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
}

func (q *Queries) UpdateEmployeeFirstName(ctx context.Context, arg UpdateEmployeeFirstNameParams) (Employee, error) {
	row := q.db.QueryRow(ctx, updateEmployeeFirstName, arg.ID, arg.FirstName)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}

const updateEmployeeLastName = `-- name: UpdateEmployeeLastName :one
UPDATE employees
SET last_name = $2 
WHERE id = $1
RETURNING id, first_name, last_name, email, password_hash, role
`

type UpdateEmployeeLastNameParams struct {
	ID       int64  `json:"id"`
	LastName string `json:"last_name"`
}

func (q *Queries) UpdateEmployeeLastName(ctx context.Context, arg UpdateEmployeeLastNameParams) (Employee, error) {
	row := q.db.QueryRow(ctx, updateEmployeeLastName, arg.ID, arg.LastName)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}

const updateEmployeePassword = `-- name: UpdateEmployeePassword :one
UPDATE employees
SET password_hash = $2 
WHERE id = $1
RETURNING id, first_name, last_name, email, password_hash, role
`

type UpdateEmployeePasswordParams struct {
	ID           int64  `json:"id"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) UpdateEmployeePassword(ctx context.Context, arg UpdateEmployeePasswordParams) (Employee, error) {
	row := q.db.QueryRow(ctx, updateEmployeePassword, arg.ID, arg.PasswordHash)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}
