// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: history.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHistory = `-- name: CreateHistory :one
INSERT INTO histories (
    task_id,
    changed_by,
    old_status,
    new_status
)
VALUES (
    $1, $2, $3, $4
)
RETURNING id, task_id, changed_by, change_at, old_status, new_status
`

type CreateHistoryParams struct {
	TaskID    pgtype.Int4 `json:"task_id"`
	ChangedBy pgtype.Int4 `json:"changed_by"`
	OldStatus string      `json:"old_status"`
	NewStatus string      `json:"new_status"`
}

func (q *Queries) CreateHistory(ctx context.Context, arg CreateHistoryParams) (History, error) {
	row := q.db.QueryRow(ctx, createHistory,
		arg.TaskID,
		arg.ChangedBy,
		arg.OldStatus,
		arg.NewStatus,
	)
	var i History
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.ChangedBy,
		&i.ChangeAt,
		&i.OldStatus,
		&i.NewStatus,
	)
	return i, err
}

const listEmployeeHistory = `-- name: ListEmployeeHistory :many
SELECT id, task_id, changed_by, change_at, old_status, new_status FROM histories
WHERE changed_by = $1
`

func (q *Queries) ListEmployeeHistory(ctx context.Context, changedBy pgtype.Int4) ([]History, error) {
	rows, err := q.db.Query(ctx, listEmployeeHistory, changedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []History{}
	for rows.Next() {
		var i History
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.ChangedBy,
			&i.ChangeAt,
			&i.OldStatus,
			&i.NewStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaskHistory = `-- name: ListTaskHistory :many
SELECT id, task_id, changed_by, change_at, old_status, new_status FROM histories
WHERE task_id = $1
`

func (q *Queries) ListTaskHistory(ctx context.Context, taskID pgtype.Int4) ([]History, error) {
	rows, err := q.db.Query(ctx, listTaskHistory, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []History{}
	for rows.Next() {
		var i History
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.ChangedBy,
			&i.ChangeAt,
			&i.OldStatus,
			&i.NewStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
