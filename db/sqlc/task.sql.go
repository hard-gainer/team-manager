// Code generated by sqlc. DO NOT EDIT.
// source: task.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    title,
    description,
    due_to,
    status,
    priority,
    project_id,
    assigned_to
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, title, description, created_at, due_to, status, priority, project_id, assigned_to
`

type CreateTaskParams struct {
	Title       string        `json:"title"`
	Description string        `json:"description"`
	DueTo       time.Time     `json:"due_to"`
	Status      string        `json:"status"`
	Priority    string        `json:"priority"`
	ProjectID   sql.NullInt32 `json:"project_id"`
	AssignedTo  sql.NullInt32 `json:"assigned_to"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.DueTo,
		arg.Status,
		arg.Priority,
		arg.ProjectID,
		arg.AssignedTo,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.DueTo,
		&i.Status,
		&i.Priority,
		&i.ProjectID,
		&i.AssignedTo,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, title, description, created_at, due_to, status, priority, project_id, assigned_to FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.DueTo,
		&i.Status,
		&i.Priority,
		&i.ProjectID,
		&i.AssignedTo,
	)
	return i, err
}

const listEmployeeTasks = `-- name: ListEmployeeTasks :many
SELECT id, title, description, created_at, due_to, status, priority, project_id, assigned_to FROM tasks
WHERE assigned_to = $1
`

func (q *Queries) ListEmployeeTasks(ctx context.Context, assignedTo sql.NullInt32) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listEmployeeTasks, assignedTo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.DueTo,
			&i.Status,
			&i.Priority,
			&i.ProjectID,
			&i.AssignedTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectTasks = `-- name: ListProjectTasks :many
SELECT id, title, description, created_at, due_to, status, priority, project_id, assigned_to FROM tasks
WHERE project_id = $1
`

func (q *Queries) ListProjectTasks(ctx context.Context, projectID sql.NullInt32) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listProjectTasks, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.DueTo,
			&i.Status,
			&i.Priority,
			&i.ProjectID,
			&i.AssignedTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, description, created_at, due_to, status, priority, project_id, assigned_to FROM tasks
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.DueTo,
			&i.Status,
			&i.Priority,
			&i.ProjectID,
			&i.AssignedTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET status = $2
WHERE id = $1
RETURNING id, title, description, created_at, due_to, status, priority, project_id, assigned_to
`

type UpdateTaskParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask, arg.ID, arg.Status)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.DueTo,
		&i.Status,
		&i.Priority,
		&i.ProjectID,
		&i.AssignedTo,
	)
	return i, err
}
